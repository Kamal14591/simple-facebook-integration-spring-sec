package com.redleafbooks.page.browse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.mobile.device.Device;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.redleafbooks.page.AbstractController;
import com.redleafbooks.page.browse.data.BrowseItem;
import com.redleafbooks.page.browse.data.BrowseItemRepository;

@Controller
public class BrowseController extends AbstractController {

	//Constants
	private static final int PAGE_SIZE = 15;

	//Thymeleafs
	private static final String DESKTOP_BROWSE = "browse/browse_desktop";
	private static final String MOBILE_BROWSE = "browse/browse_mobile";

	//Services
	@Autowired
	private BrowseItemRepository browseItemRepository;

	//Controller mappings
	@RequestMapping(value={"/browse"})
	public String browse(Device device, Model model) {
		if(isDesktopUser(device)){

			Sort sort = new Sort(Direction.ASC, BrowseItem.TITLE);
			Page<BrowseItem> books = retrievePageOfBooks(1, sort);

			model.addAttribute("books", books);

			return DESKTOP_BROWSE;
		} else {
			return MOBILE_BROWSE;
		}
	}

	//TODO does this belong here / or in UI mediation?
	/**
	 * Retrieves a single page of books, based on index and sort provided
	 * @param pageIndex start loading from here, used for pagination
	 * @param sort {@link Sort} object, containing direction and one (or more) string versions of the property to sort on
	 * @return list of {@link Page} objects containing the page-ready {@link BrowseItem} versions of books
	 */
	private Page<BrowseItem> retrievePageOfBooks(int pageIndex, Sort sort) {
		Pageable pageable = new PageRequest(pageIndex, PAGE_SIZE, sort);
		Page<BrowseItem> books = this.browseItemRepository.findAll(pageable);

		return books;
	}
}